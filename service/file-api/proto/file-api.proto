syntax = "proto3";

option go_package = "api/v1";

import "google/api/annotations.proto";
//package api.v1;

message IsAliveRequest {}
message IsAliveResponse {}

message DeliveryGetFile {
  reserved "Id";
  reserved 1 to 100;
  string UUID = 101;

}

message DeliveryPutFile {
  reserved 1 to 20;
  File File = 21;
}

message File {
  reserved 1 to 20;
  string UUID = 21;
  string BusinessType = 22;
  string FileName = 30;

  reserved 31 to 39;

  string Hash = 40;
  uint64 Size = 41;
  optional bytes Content = 42;
}

service FileApiService {
  rpc GetFile(DeliveryGetFile) returns (File) {
    option (google.api.http) = {
      get: "/getfile/{UUID}"
    };
  };

  // FOR TESTING ONLY
  rpc IsAlive(IsAliveRequest) returns (IsAliveResponse) {
    option (google.api.http) = {
      get: "/ready/live"
    };
  }
}

//service RouteAnalyticsService {
//  rpc SessionStartedEvent(SessionStartedEventRequest) returns (SessionStartedEventResponse);
//  rpc StageCompletedEvent(StageCompletedEventRequest) returns (StageCompletedEventResponse);
//  rpc ChapterCompletedEvent(ChapterCompletedEventRequest) returns (ChapterCompletedEventResponse);
//  rpc BasicStageCompletedEvent(BasicStageCompletedEventRequest) returns (BasicStageCompletedEventResponse);
//  rpc EventStageCompletedEvent(EventStageCompletedEventRequest) returns (EventStageCompletedEventResponse);
//  rpc BasicLevelNewScoreEvent(BasicLevelNewScoreEventRequest) returns (BasicLevelNewScoreEventResponse);
//  rpc EventLevelNewScoreEvent(EventLevelNewScoreEventRequest) returns (EventLevelNewScoreEventResponse);
//
//  // FOR TESTING ONLY
//  rpc IsAlive(IsAliveRequest) returns (IsAliveResponse);
//}