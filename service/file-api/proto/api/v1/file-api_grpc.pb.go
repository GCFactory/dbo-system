// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: file-api.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FileApiService_GetFile_FullMethodName = "/FileApiService/GetFile"
	FileApiService_IsAlive_FullMethodName = "/FileApiService/IsAlive"
)

// FileApiServiceClient is the client API for FileApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileApiServiceClient interface {
	GetFile(ctx context.Context, in *DeliveryGetFile, opts ...grpc.CallOption) (*File, error)
	// FOR TESTING ONLY
	IsAlive(ctx context.Context, in *IsAliveRequest, opts ...grpc.CallOption) (*IsAliveResponse, error)
}

type fileApiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileApiServiceClient(cc grpc.ClientConnInterface) FileApiServiceClient {
	return &fileApiServiceClient{cc}
}

func (c *fileApiServiceClient) GetFile(ctx context.Context, in *DeliveryGetFile, opts ...grpc.CallOption) (*File, error) {
	out := new(File)
	err := c.cc.Invoke(ctx, FileApiService_GetFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileApiServiceClient) IsAlive(ctx context.Context, in *IsAliveRequest, opts ...grpc.CallOption) (*IsAliveResponse, error) {
	out := new(IsAliveResponse)
	err := c.cc.Invoke(ctx, FileApiService_IsAlive_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileApiServiceServer is the server API for FileApiService service.
// All implementations must embed UnimplementedFileApiServiceServer
// for forward compatibility
type FileApiServiceServer interface {
	GetFile(context.Context, *DeliveryGetFile) (*File, error)
	// FOR TESTING ONLY
	IsAlive(context.Context, *IsAliveRequest) (*IsAliveResponse, error)
	mustEmbedUnimplementedFileApiServiceServer()
}

// UnimplementedFileApiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileApiServiceServer struct {
}

func (UnimplementedFileApiServiceServer) GetFile(context.Context, *DeliveryGetFile) (*File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedFileApiServiceServer) IsAlive(context.Context, *IsAliveRequest) (*IsAliveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAlive not implemented")
}
func (UnimplementedFileApiServiceServer) mustEmbedUnimplementedFileApiServiceServer() {}

// UnsafeFileApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileApiServiceServer will
// result in compilation errors.
type UnsafeFileApiServiceServer interface {
	mustEmbedUnimplementedFileApiServiceServer()
}

func RegisterFileApiServiceServer(s grpc.ServiceRegistrar, srv FileApiServiceServer) {
	s.RegisterService(&FileApiService_ServiceDesc, srv)
}

func _FileApiService_GetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliveryGetFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileApiServiceServer).GetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileApiService_GetFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileApiServiceServer).GetFile(ctx, req.(*DeliveryGetFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileApiService_IsAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsAliveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileApiServiceServer).IsAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileApiService_IsAlive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileApiServiceServer).IsAlive(ctx, req.(*IsAliveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileApiService_ServiceDesc is the grpc.ServiceDesc for FileApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FileApiService",
	HandlerType: (*FileApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFile",
			Handler:    _FileApiService_GetFile_Handler,
		},
		{
			MethodName: "IsAlive",
			Handler:    _FileApiService_IsAlive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "file-api.proto",
}
