// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/GCFactory/dbo-system/service/users/internal/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockRepository) AddUser(ctx context.Context, user_data *models.User_full_data) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", ctx, user_data)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockRepositoryMockRecorder) AddUser(ctx, user_data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockRepository)(nil).AddUser), ctx, user_data)
}

// GetUserData mocks base method.
func (m *MockRepository) GetUserData(ctx context.Context, user_uuid uuid.UUID) (*models.User_full_data, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserData", ctx, user_uuid)
	ret0, _ := ret[0].(*models.User_full_data)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserData indicates an expected call of GetUserData.
func (mr *MockRepositoryMockRecorder) GetUserData(ctx, user_uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserData", reflect.TypeOf((*MockRepository)(nil).GetUserData), ctx, user_uuid)
}

// GetUsersAccounts mocks base method.
func (m *MockRepository) GetUsersAccounts(ctx context.Context, user_uuid uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersAccounts", ctx, user_uuid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersAccounts indicates an expected call of GetUsersAccounts.
func (mr *MockRepositoryMockRecorder) GetUsersAccounts(ctx, user_uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersAccounts", reflect.TypeOf((*MockRepository)(nil).GetUsersAccounts), ctx, user_uuid)
}

// UpdatePassport mocks base method.
func (m *MockRepository) UpdatePassport(ctx context.Context, passport *models.Passport) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassport", ctx, passport)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassport indicates an expected call of UpdatePassport.
func (mr *MockRepositoryMockRecorder) UpdatePassport(ctx, passport interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassport", reflect.TypeOf((*MockRepository)(nil).UpdatePassport), ctx, passport)
}

// UpdateUserAccount mocks base method.
func (m *MockRepository) UpdateUserAccount(ctx context.Context, user_uuid uuid.UUID, accounts string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserAccount", ctx, user_uuid, accounts)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserAccount indicates an expected call of UpdateUserAccount.
func (mr *MockRepositoryMockRecorder) UpdateUserAccount(ctx, user_uuid, accounts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserAccount", reflect.TypeOf((*MockRepository)(nil).UpdateUserAccount), ctx, user_uuid, accounts)
}
