// Code generated by MockGen. DO NOT EDIT.
// Source: pg_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/GCFactory/dbo-system/service/totp/internal/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateConfig mocks base method.
func (m *MockRepository) CreateConfig(ctx context.Context, totp models.TOTPConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfig", ctx, totp)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateConfig indicates an expected call of CreateConfig.
func (mr *MockRepositoryMockRecorder) CreateConfig(ctx, totp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfig", reflect.TypeOf((*MockRepository)(nil).CreateConfig), ctx, totp)
}

// GetActiveConfig mocks base method.
func (m *MockRepository) GetActiveConfig(ctx context.Context, userId uuid.UUID) (*models.TOTPConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveConfig", ctx, userId)
	ret0, _ := ret[0].(*models.TOTPConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveConfig indicates an expected call of GetActiveConfig.
func (mr *MockRepositoryMockRecorder) GetActiveConfig(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveConfig", reflect.TypeOf((*MockRepository)(nil).GetActiveConfig), ctx, userId)
}

// GetConfigByTotpId mocks base method.
func (m *MockRepository) GetConfigByTotpId(ctx context.Context, totpId uuid.UUID) (*models.TOTPConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigByTotpId", ctx, totpId)
	ret0, _ := ret[0].(*models.TOTPConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigByTotpId indicates an expected call of GetConfigByTotpId.
func (mr *MockRepositoryMockRecorder) GetConfigByTotpId(ctx, totpId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigByTotpId", reflect.TypeOf((*MockRepository)(nil).GetConfigByTotpId), ctx, totpId)
}

// GetConfigByUserId mocks base method.
func (m *MockRepository) GetConfigByUserId(ctx context.Context, userId uuid.UUID) (*models.TOTPConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigByUserId", ctx, userId)
	ret0, _ := ret[0].(*models.TOTPConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigByUserId indicates an expected call of GetConfigByUserId.
func (mr *MockRepositoryMockRecorder) GetConfigByUserId(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigByUserId", reflect.TypeOf((*MockRepository)(nil).GetConfigByUserId), ctx, userId)
}

// GetLastDisabledConfig mocks base method.
func (m *MockRepository) GetLastDisabledConfig(ctx context.Context, userId uuid.UUID) (*models.TOTPConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastDisabledConfig", ctx, userId)
	ret0, _ := ret[0].(*models.TOTPConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastDisabledConfig indicates an expected call of GetLastDisabledConfig.
func (mr *MockRepositoryMockRecorder) GetLastDisabledConfig(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastDisabledConfig", reflect.TypeOf((*MockRepository)(nil).GetLastDisabledConfig), ctx, userId)
}

// UpdateTotpActivityByTotpId mocks base method.
func (m *MockRepository) UpdateTotpActivityByTotpId(ctx context.Context, totpId uuid.UUID, status bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTotpActivityByTotpId", ctx, totpId, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTotpActivityByTotpId indicates an expected call of UpdateTotpActivityByTotpId.
func (mr *MockRepositoryMockRecorder) UpdateTotpActivityByTotpId(ctx, totpId, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTotpActivityByTotpId", reflect.TypeOf((*MockRepository)(nil).UpdateTotpActivityByTotpId), ctx, totpId, status)
}
