// Code generated by MockGen. DO NOT EDIT.
// Source: totp.go

// Package mock is a generated GoMock package.
package mock

import (
	url "net/url"
	reflect "reflect"
	time "time"

	config "github.com/GCFactory/dbo-system/service/totp/pkg/otp/config"
	gomock "github.com/golang/mock/gomock"
)

// MockTotp is a mock of Totp interface.
type MockTotp struct {
	ctrl     *gomock.Controller
	recorder *MockTotpMockRecorder
}

// MockTotpMockRecorder is the mock recorder for MockTotp.
type MockTotpMockRecorder struct {
	mock *MockTotp
}

// NewMockTotp creates a new mock instance.
func NewMockTotp(ctrl *gomock.Controller) *MockTotp {
	mock := &MockTotp{ctrl: ctrl}
	mock.recorder = &MockTotpMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTotp) EXPECT() *MockTotpMockRecorder {
	return m.recorder
}

// EncodeQuery mocks base method.
func (m *MockTotp) EncodeQuery(v url.Values) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncodeQuery", v)
	ret0, _ := ret[0].(string)
	return ret0
}

// EncodeQuery indicates an expected call of EncodeQuery.
func (mr *MockTotpMockRecorder) EncodeQuery(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodeQuery", reflect.TypeOf((*MockTotp)(nil).EncodeQuery), v)
}

// Generate mocks base method.
func (m *MockTotp) Generate(opts config.GenerateOpts) (*string, *string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate", opts)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(*string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Generate indicates an expected call of Generate.
func (mr *MockTotpMockRecorder) Generate(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockTotp)(nil).Generate), opts)
}

// GenerateCode mocks base method.
func (m *MockTotp) GenerateCode(secret string, t time.Time) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateCode", secret, t)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateCode indicates an expected call of GenerateCode.
func (mr *MockTotpMockRecorder) GenerateCode(secret, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateCode", reflect.TypeOf((*MockTotp)(nil).GenerateCode), secret, t)
}

// GenerateCodeCustom mocks base method.
func (m *MockTotp) GenerateCodeCustom(secret string, t time.Time, opts config.ValidateOpts) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateCodeCustom", secret, t, opts)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateCodeCustom indicates an expected call of GenerateCodeCustom.
func (mr *MockTotpMockRecorder) GenerateCodeCustom(secret, t, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateCodeCustom", reflect.TypeOf((*MockTotp)(nil).GenerateCodeCustom), secret, t, opts)
}

// Validate mocks base method.
func (m *MockTotp) Validate(passcode, secret string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", passcode, secret)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockTotpMockRecorder) Validate(passcode, secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockTotp)(nil).Validate), passcode, secret)
}

// ValidateCustom mocks base method.
func (m *MockTotp) ValidateCustom(passcode, secret string, t time.Time, opts config.ValidateOpts) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateCustom", passcode, secret, t, opts)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateCustom indicates an expected call of ValidateCustom.
func (mr *MockTotpMockRecorder) ValidateCustom(passcode, secret, t, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateCustom", reflect.TypeOf((*MockTotp)(nil).ValidateCustom), passcode, secret, t, opts)
}
