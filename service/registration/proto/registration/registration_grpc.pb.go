// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: registration/registration.proto

package registration

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RegistrationService_RegistrateUser_FullMethodName = "/registration.RegistrationService/RegistrateUser"
	RegistrationService_StartEvent_FullMethodName     = "/registration.RegistrationService/StartEvent"
	RegistrationService_RollBackEvent_FullMethodName  = "/registration.RegistrationService/RollBackEvent"
)

// RegistrationServiceClient is the client API for RegistrationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegistrationServiceClient interface {
	// Регистрация пользователя
	RegistrateUser(ctx context.Context, in *RegestrationData, opts ...grpc.CallOption) (*RegistrationResult, error)
	// Запуск event-а
	StartEvent(ctx context.Context, in *EventData, opts ...grpc.CallOption) (*EventStatus, error)
	// Откад event-а
	RollBackEvent(ctx context.Context, in *EventData, opts ...grpc.CallOption) (*EventStatus, error)
}

type registrationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistrationServiceClient(cc grpc.ClientConnInterface) RegistrationServiceClient {
	return &registrationServiceClient{cc}
}

func (c *registrationServiceClient) RegistrateUser(ctx context.Context, in *RegestrationData, opts ...grpc.CallOption) (*RegistrationResult, error) {
	out := new(RegistrationResult)
	err := c.cc.Invoke(ctx, RegistrationService_RegistrateUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationServiceClient) StartEvent(ctx context.Context, in *EventData, opts ...grpc.CallOption) (*EventStatus, error) {
	out := new(EventStatus)
	err := c.cc.Invoke(ctx, RegistrationService_StartEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationServiceClient) RollBackEvent(ctx context.Context, in *EventData, opts ...grpc.CallOption) (*EventStatus, error) {
	out := new(EventStatus)
	err := c.cc.Invoke(ctx, RegistrationService_RollBackEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistrationServiceServer is the server API for RegistrationService service.
// All implementations must embed UnimplementedRegistrationServiceServer
// for forward compatibility
type RegistrationServiceServer interface {
	// Регистрация пользователя
	RegistrateUser(context.Context, *RegestrationData) (*RegistrationResult, error)
	// Запуск event-а
	StartEvent(context.Context, *EventData) (*EventStatus, error)
	// Откад event-а
	RollBackEvent(context.Context, *EventData) (*EventStatus, error)
	mustEmbedUnimplementedRegistrationServiceServer()
}

// UnimplementedRegistrationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRegistrationServiceServer struct {
}

func (UnimplementedRegistrationServiceServer) RegistrateUser(context.Context, *RegestrationData) (*RegistrationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistrateUser not implemented")
}
func (UnimplementedRegistrationServiceServer) StartEvent(context.Context, *EventData) (*EventStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartEvent not implemented")
}
func (UnimplementedRegistrationServiceServer) RollBackEvent(context.Context, *EventData) (*EventStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollBackEvent not implemented")
}
func (UnimplementedRegistrationServiceServer) mustEmbedUnimplementedRegistrationServiceServer() {}

// UnsafeRegistrationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegistrationServiceServer will
// result in compilation errors.
type UnsafeRegistrationServiceServer interface {
	mustEmbedUnimplementedRegistrationServiceServer()
}

func RegisterRegistrationServiceServer(s grpc.ServiceRegistrar, srv RegistrationServiceServer) {
	s.RegisterService(&RegistrationService_ServiceDesc, srv)
}

func _RegistrationService_RegistrateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegestrationData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServiceServer).RegistrateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistrationService_RegistrateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServiceServer).RegistrateUser(ctx, req.(*RegestrationData))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistrationService_StartEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServiceServer).StartEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistrationService_StartEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServiceServer).StartEvent(ctx, req.(*EventData))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistrationService_RollBackEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServiceServer).RollBackEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistrationService_RollBackEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServiceServer).RollBackEvent(ctx, req.(*EventData))
	}
	return interceptor(ctx, in, info, handler)
}

// RegistrationService_ServiceDesc is the grpc.ServiceDesc for RegistrationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegistrationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "registration.RegistrationService",
	HandlerType: (*RegistrationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegistrateUser",
			Handler:    _RegistrationService_RegistrateUser_Handler,
		},
		{
			MethodName: "StartEvent",
			Handler:    _RegistrationService_StartEvent_Handler,
		},
		{
			MethodName: "RollBackEvent",
			Handler:    _RegistrationService_RollBackEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "registration/registration.proto",
}
