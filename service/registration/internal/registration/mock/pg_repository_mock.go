// Code generated by MockGen. DO NOT EDIT.
// Source: pg_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/GCFactory/dbo-system/service/registration/internal/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateSaga mocks base method.
func (m *MockRepository) CreateSaga(ctx context.Context, saga models.Saga) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSaga", ctx, saga)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSaga indicates an expected call of CreateSaga.
func (mr *MockRepositoryMockRecorder) CreateSaga(ctx, saga interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSaga", reflect.TypeOf((*MockRepository)(nil).CreateSaga), ctx, saga)
}

// DeleteSaga mocks base method.
func (m *MockRepository) DeleteSaga(ctx context.Context, saga_uuid uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSaga", ctx, saga_uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSaga indicates an expected call of DeleteSaga.
func (mr *MockRepositoryMockRecorder) DeleteSaga(ctx, saga_uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSaga", reflect.TypeOf((*MockRepository)(nil).DeleteSaga), ctx, saga_uuid)
}

// GetSagaById mocks base method.
func (m *MockRepository) GetSagaById(ctx context.Context, saga_uuid uuid.UUID) (*models.Saga, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSagaById", ctx, saga_uuid)
	ret0, _ := ret[0].(*models.Saga)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSagaById indicates an expected call of GetSagaById.
func (mr *MockRepositoryMockRecorder) GetSagaById(ctx, saga_uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSagaById", reflect.TypeOf((*MockRepository)(nil).GetSagaById), ctx, saga_uuid)
}

// UpdateSagaEvents mocks base method.
func (m *MockRepository) UpdateSagaEvents(ctx context.Context, saga_uuid uuid.UUID, events string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSagaEvents", ctx, saga_uuid, events)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSagaEvents indicates an expected call of UpdateSagaEvents.
func (mr *MockRepositoryMockRecorder) UpdateSagaEvents(ctx, saga_uuid, events interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSagaEvents", reflect.TypeOf((*MockRepository)(nil).UpdateSagaEvents), ctx, saga_uuid, events)
}

// UpdateSagaStatus mocks base method.
func (m *MockRepository) UpdateSagaStatus(ctx context.Context, saga_uuid uuid.UUID, saga_status uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSagaStatus", ctx, saga_uuid, saga_status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSagaStatus indicates an expected call of UpdateSagaStatus.
func (mr *MockRepositoryMockRecorder) UpdateSagaStatus(ctx, saga_uuid, saga_status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSagaStatus", reflect.TypeOf((*MockRepository)(nil).UpdateSagaStatus), ctx, saga_uuid, saga_status)
}
