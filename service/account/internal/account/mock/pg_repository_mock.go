// Code generated by MockGen. DO NOT EDIT.
// Source: pg_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/GCFactory/dbo-system/service/account/internal/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddReserveReason mocks base method.
func (m *MockRepository) AddReserveReason(ctx context.Context, reason *models.ReserverReason) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddReserveReason", ctx, reason)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddReserveReason indicates an expected call of AddReserveReason.
func (mr *MockRepositoryMockRecorder) AddReserveReason(ctx, reason interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReserveReason", reflect.TypeOf((*MockRepository)(nil).AddReserveReason), ctx, reason)
}

// CreateAccount mocks base method.
func (m *MockRepository) CreateAccount(ctx context.Context, account *models.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", ctx, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockRepositoryMockRecorder) CreateAccount(ctx, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockRepository)(nil).CreateAccount), ctx, account)
}

// DeleteAccount mocks base method.
func (m *MockRepository) DeleteAccount(ctx context.Context, acc_uuid uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount", ctx, acc_uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccount indicates an expected call of DeleteAccount.
func (mr *MockRepositoryMockRecorder) DeleteAccount(ctx, acc_uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockRepository)(nil).DeleteAccount), ctx, acc_uuid)
}

// DeleteReserveReason mocks base method.
func (m *MockRepository) DeleteReserveReason(ctx context.Context, acc_uuid uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReserveReason", ctx, acc_uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReserveReason indicates an expected call of DeleteReserveReason.
func (mr *MockRepositoryMockRecorder) DeleteReserveReason(ctx, acc_uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReserveReason", reflect.TypeOf((*MockRepository)(nil).DeleteReserveReason), ctx, acc_uuid)
}

// GetAccountAmount mocks base method.
func (m *MockRepository) GetAccountAmount(ctx context.Context, acc_uuid uuid.UUID) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountAmount", ctx, acc_uuid)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountAmount indicates an expected call of GetAccountAmount.
func (mr *MockRepositoryMockRecorder) GetAccountAmount(ctx, acc_uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountAmount", reflect.TypeOf((*MockRepository)(nil).GetAccountAmount), ctx, acc_uuid)
}

// GetAccountData mocks base method.
func (m *MockRepository) GetAccountData(ctx context.Context, acc_uuid uuid.UUID) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountData", ctx, acc_uuid)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountData indicates an expected call of GetAccountData.
func (mr *MockRepositoryMockRecorder) GetAccountData(ctx, acc_uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountData", reflect.TypeOf((*MockRepository)(nil).GetAccountData), ctx, acc_uuid)
}

// GetAccountStatus mocks base method.
func (m *MockRepository) GetAccountStatus(ctx context.Context, acc_uuid uuid.UUID) (uint8, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountStatus", ctx, acc_uuid)
	ret0, _ := ret[0].(uint8)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountStatus indicates an expected call of GetAccountStatus.
func (mr *MockRepositoryMockRecorder) GetAccountStatus(ctx, acc_uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountStatus", reflect.TypeOf((*MockRepository)(nil).GetAccountStatus), ctx, acc_uuid)
}

// GetReserveReason mocks base method.
func (m *MockRepository) GetReserveReason(ctx context.Context, acc_uuid uuid.UUID) (*models.ReserverReason, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReserveReason", ctx, acc_uuid)
	ret0, _ := ret[0].(*models.ReserverReason)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReserveReason indicates an expected call of GetReserveReason.
func (mr *MockRepositoryMockRecorder) GetReserveReason(ctx, acc_uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReserveReason", reflect.TypeOf((*MockRepository)(nil).GetReserveReason), ctx, acc_uuid)
}

// UpdateAccountAmount mocks base method.
func (m *MockRepository) UpdateAccountAmount(ctx context.Context, acc_uuid uuid.UUID, acc_new_amount float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountAmount", ctx, acc_uuid, acc_new_amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccountAmount indicates an expected call of UpdateAccountAmount.
func (mr *MockRepositoryMockRecorder) UpdateAccountAmount(ctx, acc_uuid, acc_new_amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountAmount", reflect.TypeOf((*MockRepository)(nil).UpdateAccountAmount), ctx, acc_uuid, acc_new_amount)
}

// UpdateAccountStatus mocks base method.
func (m *MockRepository) UpdateAccountStatus(ctx context.Context, acc_uuid uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountStatus", ctx, acc_uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccountStatus indicates an expected call of UpdateAccountStatus.
func (mr *MockRepositoryMockRecorder) UpdateAccountStatus(ctx, acc_uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountStatus", reflect.TypeOf((*MockRepository)(nil).UpdateAccountStatus), ctx, acc_uuid)
}
