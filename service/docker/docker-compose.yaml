version: "3.8"

name: dbo-system

services:

  jaeger:
    container_name: jaeger_container
    hostname: jaeger
    restart: always
    image: jaegertracing/all-in-one:1.49
    environment:
      - COLLECTOR_ZIPKIN_HTTP_PORT=9411
    ports:
      - 5775:5775/udp
      - 6831:6831/udp
      - 6832:6832/udp
      - 5778:5778
      - 16686:16686
      - 14268:14268
      - 14250:14250
      - 9411:9411
    networks:
      - web_api
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M

  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - web_api
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M

  kafka:
    image: confluentinc/cp-server:7.2.1
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9997:9997"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_HOSTNAME: kafka
    networks:
      - web_api
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8082:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: true
    networks:
      - web_api
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

#  mailhog:
#    container_name: mailhog
#    image: mailhog/mailhog
#    logging:
#      driver: 'none'  # disable saving logs
#    ports:
#      - 1025:1025 # smtp server
#      - 8025:8025 # web ui

  postgresql_users:
    image: postgres:14-alpine
    hostname: postgresql_users
    container_name: postgresql_users
    ports:
      - "5433:5432"
    restart: on-failure
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=users
    volumes:
      - ./db/db_users:/var/lib/postgresql/data
    networks:
      - web_api
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M

  postgresql_account:
    image: postgres:14-alpine
    hostname: postgresql_account
    container_name: postgresql_account
    ports:
      - "5434:5432"
    restart: on-failure
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=account
    volumes:
      - ./db/db_accounts:/var/lib/postgresql/data
    networks:
      - web_api
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M

  postgresql_registration:
    image: postgres:14-alpine
    hostname: postgresql_registration
    container_name: postgresql_registration
    ports:
      - "5435:5432"
    restart: on-failure
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=registration
    volumes:
      - ./db/db_registration:/var/lib/postgresql/data
    networks:
      - web_api
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M

  service_users:
    build:
      context: ./../users
      dockerfile: ./docker/Dockerfile
    image: users_image
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M
    ports:
      - "8090-8099:8080"
    links:
      - jaeger
      - kafka
      - postgresql_users
    depends_on:
      - jaeger
      - kafka
      - postgresql_users
    restart: always
    cap_add:
      - SYS_PTRACE
    volumes:
      - ./services/users/users_config:/usr/src/app/config
    networks:
      - web_api

  service_accounts:
    build:
      context: ./../account
      dockerfile: ./docker/Dockerfile
    image: accounts_image
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 128M
    ports:
      - "8100-8109:8080"
    links:
      - jaeger
      - kafka
      - postgresql_account
    depends_on:
      - jaeger
      - kafka
      - postgresql_account
    cap_add:
      - SYS_PTRACE
    restart: always
    volumes:
      - ./services/accounts/accounts_config:/usr/src/app/config
    networks:
      - web_api

#  service_registration:
#    build:
#      context: ./../registration
#      dockerfile: ./docker/Dockerfile
#    image: registration_image
#    deploy:
#      mode: replicated
#      replicas: 1
#    ports:
#      - "8110-8119:8080"
#    links:
#      - jaeger
#      - kafka
#      - postgresql_registration
#      - service_accounts
##      - service_users
#    depends_on:
#      - jaeger
#      - kafka
#      - postgresql_registration
#      - service_accounts
##      - service_users
#    cap_add:
#      - SYS_PTRACE
#    restart: always
#    volumes:
#      - ./services/registration/registration_config:/usr/src/app/config
#    networks:
#      - web_api

networks:
  web_api:
    driver: bridge

volumes:
  db_users:
  users_config:
  db_accounts:
  accounts_config:
  db_registration:
  registration_config: